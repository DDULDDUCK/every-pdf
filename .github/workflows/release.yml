# .github/workflows/release.yml

name: Build & Release Every-PDF

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    # 이제 OS와 아키텍처 조합으로 작업을 실행합니다.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # 빌드할 OS와 아키텍처 조합을 정의합니다.
        include:
          - os: windows-latest
            arch: x64
          - os: macos-13 # Intel(x64) 빌드를 위해 macos-13 사용
            arch: x64
          - os: macos-latest # Apple Silicon(arm64) 빌드를 위해 macos-latest(또는 macos-14) 사용
            arch: arm64

    steps:
      # 1. 소스 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Python 환경 설정
      - name: Setup Python and Cache Pip
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # 안정적인 버전 사용 권장
          cache: 'pip'

      # 3. Node.js 환경 설정
      - name: Setup Node.js and Cache NPM
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 4. NPM 의존성 설치
      - name: Install dependencies
        run: npm ci

      # 5. 플랫폼 및 아키텍처에 맞는 빌드 및 퍼블리시 실행
      - name: Build and Release for Windows
        if: matrix.os == 'windows-latest'
        run: npm run publish -- --${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and Release for macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          # 스크립트 실행 중 오류 발생 시 즉시 중단합니다. (매우 중요)
          set -e

          echo "🔐 1. API Key 파일을 생성합니다."
          # APPLE_API_KEY Secret을 디코딩하여 임시 .p8 파일로 저장합니다.
          # macOS에서는 --decode 대신 -D 옵션을 사용해야 합니다.
          echo -n "${{ secrets.APPLE_API_KEY }}" | base64 -D -o AuthKey.p8
          echo "✅ API Key 파일 생성 완료."

          echo "🔐 2. 키체인에 자격 증명을 저장합니다."
          # "NOTARY_PROFILE" 이라는 이름으로 프로파일을 생성합니다.
          # xcrun이 성공하면 'Success.' 메시지를 출력합니다.
          xcrun notarytool store-credentials "NOTARY_PROFILE" --key AuthKey.p8 --key-id "${{ secrets.APPLE_API_KEY_ID }}" --issuer "${{ secrets.APPLE_API_ISSUER }}"
          echo "✅ 키체인 프로파일 생성 완료."

          echo "📦 3. Electron-Builder를 실행하여 앱을 빌드하고 퍼블리시합니다."
          npm run publish -- --${{ matrix.arch }}
          echo "🚀 빌드 및 퍼블리시 성공!"
        env:
          # 릴리즈 업로드용
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # 코드 서명용
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          
          # 공증용 (키체인 프로파일 사용)
          # electron-builder에게 사용할 키체인 프로파일 이름을 알려줍니다.
          APPLE_KEYCHAIN_PROFILE: "NOTARY_PROFILE"